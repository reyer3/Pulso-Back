# etl/dependencies_aux_mart_extension.py

"""
üîß EXTENSI√ìN DE DEPENDENCIAS: AUX y MART Pipelines

Este archivo extiende etl/dependencies.py para incluir:
- AuxBuildPipeline
- FullETLOrchestrator  
- Integraci√≥n con pipelines existentes

INSTRUCCIONES DE INTEGRACI√ìN:
1. Agregar estos imports a etl/dependencies.py
2. Agregar los m√©todos a la clase ETLDependencies
3. Agregar las convenience functions
4. Actualizar m√©todos existentes
"""

from etl.pipelines.aux_build_pipeline import AuxBuildPipeline
from etl.pipelines.full_etl_orchestrator import FullETLOrchestrator
from etl.config import ETLConfig

# ============================================================================
# IMPORTS A AGREGAR EN etl/dependencies.py (l√≠nea ~15):
# ============================================================================
"""
from etl.pipelines.aux_build_pipeline import AuxBuildPipeline
from etl.pipelines.full_etl_orchestrator import FullETLOrchestrator
"""

# ============================================================================
# M√âTODOS A AGREGAR EN LA CLASE ETLDependencies (despu√©s de mart_build_pipeline):
# ============================================================================

async def aux_build_pipeline(self):
    """üÜï Get AUX build pipeline instance"""
    if not hasattr(self, '_aux_build_pipeline') or self._aux_build_pipeline is None:
        if self._db_manager is None:
            raise RuntimeError("Database manager not initialized. Call init_resources() first.")
            
        self._aux_build_pipeline = AuxBuildPipeline(
            db_manager=self._db_manager,
            project_uid=ETLConfig.PROJECT_UID
        )
        
    return self._aux_build_pipeline

async def full_etl_orchestrator(self):
    """üÜï Get full ETL orchestrator instance"""
    if not hasattr(self, '_full_etl_orchestrator') or self._full_etl_orchestrator is None:
        if self._db_manager is None:
            raise RuntimeError("Database manager not initialized. Call init_resources() first.")
            
        # Obtener pipeline RAW (h√≠brido)
        raw_pipeline = await self.hybrid_raw_pipeline()
        
        self._full_etl_orchestrator = FullETLOrchestrator(
            db_manager=self._db_manager,
            project_uid=ETLConfig.PROJECT_UID,
            raw_pipeline=raw_pipeline
        )
        
    return self._full_etl_orchestrator

# ============================================================================
# ACTUALIZAR shutdown_resources (l√≠nea ~95) - AGREGAR ESTAS L√çNEAS:
# ============================================================================
"""
# En el m√©todo shutdown_resources, agregar despu√©s de self._campaign_catchup_pipeline = None:

        # üÜï Reset AUX and orchestrator instances
        if hasattr(self, '_aux_build_pipeline'):
            self._aux_build_pipeline = None
        if hasattr(self, '_full_etl_orchestrator'):
            self._full_etl_orchestrator = None
"""

# ============================================================================
# ACTUALIZAR health_check (l√≠nea ~130) - AGREGAR EN LA SECCI√ìN DE CHECKS:
# ============================================================================
"""
# Agregar despu√©s del check de mart_pipeline:

            # üÜï Check AUX pipeline availability
            try:
                aux_pipeline = await self.aux_build_pipeline()
                health_status["aux_pipeline"] = "available"
            except Exception:
                health_status["aux_pipeline"] = "not_available"
                
            # üÜï Check Full ETL orchestrator
            try:
                orchestrator = await self.full_etl_orchestrator()
                health_status["full_etl_orchestrator"] = "available"
            except Exception:
                orchestrator_health_status["full_etl_orchestrator"] = "not_available"
"""

# ============================================================================
# CONVENIENCE FUNCTIONS A AGREGAR AL FINAL DEL ARCHIVO (l√≠nea ~200):
# ============================================================================

async def get_aux_build_pipeline():
    """üÜï Convenience function for getting AUX build pipeline"""
    return await etl_dependencies.aux_build_pipeline()

async def get_full_etl_orchestrator():
    """üÜï Convenience function for getting full ETL orchestrator"""
    return await etl_dependencies.full_etl_orchestrator()

# ============================================================================
# ACTUALIZAR __init__ DE ETLDependencies (l√≠nea ~30) - AGREGAR ESTAS L√çNEAS:
# ============================================================================
"""
# En el m√©todo __init__, agregar despu√©s de self._campaign_catchup_pipeline = None:

        # üÜï AUX and orchestrator pipelines
        self._aux_build_pipeline = None
        self._full_etl_orchestrator = None
"""

# ============================================================================
# C√ìDIGO DE INTEGRACI√ìN COMPLETO PARA COPIAR/PEGAR:
# ============================================================================

# 1. IMPORTS (agregar en l√≠nea ~15):
IMPORTS_TO_ADD = """
from etl.pipelines.aux_build_pipeline import AuxBuildPipeline
from etl.pipelines.full_etl_orchestrator import FullETLOrchestrator
"""

# 2. INIT (agregar en __init__ despu√©s de l√≠nea ~30):
INIT_TO_ADD = """
        # üÜï AUX and orchestrator pipelines
        self._aux_build_pipeline = None
        self._full_etl_orchestrator = None
"""

# 3. M√âTODOS (agregar despu√©s de mart_build_pipeline):
METHODS_TO_ADD = """
    async def aux_build_pipeline(self):
        \"\"\"üÜï Get AUX build pipeline instance\"\"\"
        if not hasattr(self, '_aux_build_pipeline') or self._aux_build_pipeline is None:
            if self._db_manager is None:
                raise RuntimeError("Database manager not initialized. Call init_resources() first.")
                
            self._aux_build_pipeline = AuxBuildPipeline(
                db_manager=self._db_manager,
                project_uid=ETLConfig.PROJECT_UID
            )
            
        return self._aux_build_pipeline

    async def full_etl_orchestrator(self):
        \"\"\"üÜï Get full ETL orchestrator instance\"\"\"
        if not hasattr(self, '_full_etl_orchestrator') or self._full_etl_orchestrator is None:
            if self._db_manager is None:
                raise RuntimeError("Database manager not initialized. Call init_resources() first.")
                
            # Obtener pipeline RAW (h√≠brido)
            raw_pipeline = await self.hybrid_raw_pipeline()
            
            self._full_etl_orchestrator = FullETLOrchestrator(
                db_manager=self._db_manager,
                project_uid=ETLConfig.PROJECT_UID,
                raw_pipeline=raw_pipeline
            )
            
        return self._full_etl_orchestrator
"""

# 4. SHUTDOWN (agregar en shutdown_resources):
SHUTDOWN_TO_ADD = """
        # üÜï Reset AUX and orchestrator instances
        if hasattr(self, '_aux_build_pipeline'):
            self._aux_build_pipeline = None
        if hasattr(self, '_full_etl_orchestrator'):
            self._full_etl_orchestrator = None
"""

# 5. HEALTH CHECK (agregar en health_check):
HEALTH_CHECK_TO_ADD = """
            # üÜï Check AUX pipeline availability
            try:
                aux_pipeline = await self.aux_build_pipeline()
                health_status["aux_pipeline"] = "available"
            except Exception:
                health_status["aux_pipeline"] = "not_available"
                
            # üÜï Check Full ETL orchestrator
            try:
                orchestrator = await self.full_etl_orchestrator()
                health_status["full_etl_orchestrator"] = "available"
            except Exception:
                health_status["full_etl_orchestrator"] = "not_available"
"""

# 6. CONVENIENCE FUNCTIONS (agregar al final):
CONVENIENCE_TO_ADD = """
async def get_aux_build_pipeline():
    \"\"\"üÜï Convenience function for getting AUX build pipeline\"\"\"
    return await etl_dependencies.aux_build_pipeline()

async def get_full_etl_orchestrator():
    \"\"\"üÜï Convenience function for getting full ETL orchestrator\"\"\"
    return await etl_dependencies.full_etl_orchestrator()
"""

# ============================================================================
# EJEMPLOS DE USO DESPU√âS DE LA INTEGRACI√ìN:
# ============================================================================

USAGE_EXAMPLES = """
# 1. Ejecutar solo AUX para una campa√±a
from etl.dependencies import get_aux_build_pipeline
from etl.models import CampaignWindow
from datetime import date

campaign = CampaignWindow(
    archivo="TEST_CAMPAIGN",
    fecha_apertura=date(2024, 12, 1),
    fecha_cierre=date(2024, 12, 31),
    tipo_cartera="REGULAR",
    estado_cartera="OPEN"
)

aux_pipeline = await get_aux_build_pipeline()
result = await aux_pipeline.run_for_campaign(campaign)
print(f"AUX Result: {result['status']}, {result['total_rows_processed']} rows")

# 2. Ejecutar pipeline completo RAW‚ÜíAUX‚ÜíMART
from etl.dependencies import get_full_etl_orchestrator

orchestrator = await get_full_etl_orchestrator()
result = await orchestrator.run_full_etl_for_campaign(campaign)
print(f"Full ETL Status: {result['overall_status']}")

# 3. Ejecutar solo AUX‚ÜíMART (RAW ya cargado)
result = await orchestrator.run_aux_mart_only(campaign)
print(f"AUX+MART Result: {result['overall_status']}")

# 4. Validar pipeline completo
validation = await orchestrator.validate_full_pipeline(campaign)
print(f"Pipeline Validation: {validation['overall_status']}")

# 5. Health check con nuevos pipelines
from etl.dependencies import etl_system_health_check

health = await etl_system_health_check()
print(f"AUX Pipeline: {health['aux_pipeline']}")
print(f"Orchestrator: {health['full_etl_orchestrator']}")
"""

# ============================================================================
# ORDEN DE INTEGRACI√ìN RECOMENDADO:
# ============================================================================

INTEGRATION_STEPS = """
PASO 1: Backup del archivo original
cp etl/dependencies.py etl/dependencies.py.backup

PASO 2: Agregar imports (l√≠nea ~15)
# Copiar IMPORTS_TO_ADD

PASO 3: Actualizar __init__ (l√≠nea ~30)  
# Copiar INIT_TO_ADD

PASO 4: Agregar m√©todos (despu√©s de mart_build_pipeline)
# Copiar METHODS_TO_ADD

PASO 5: Actualizar shutdown_resources (l√≠nea ~95)
# Copiar SHUTDOWN_TO_ADD

PASO 6: Actualizar health_check (l√≠nea ~130)
# Copiar HEALTH_CHECK_TO_ADD

PASO 7: Agregar convenience functions (al final)
# Copiar CONVENIENCE_TO_ADD

PASO 8: Probar integraci√≥n
python -c "
import asyncio
from etl.dependencies import get_full_etl_orchestrator, etl_system_health_check

async def test():
    try:
        health = await etl_system_health_check()
        print('Health check OK:', health.get('aux_pipeline'), health.get('full_etl_orchestrator'))
        print('‚úÖ Integration successful')
    except Exception as e:
        print('‚ùå Integration failed:', e)

asyncio.run(test())
"
"""

print("üîß Extensi√≥n de dependencias lista para integraci√≥n")
print("üìñ Ver INTEGRATION_STEPS para orden de aplicaci√≥n")