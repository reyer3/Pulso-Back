# ========================================
# üöÄ yoyo-migrations configuration - PRODUCTION READY
# TimescaleDB optimized with environment variables
# ========================================

[DEFAULT]
# Directory containing migration files
sources = migrations

# üîß DATABASE CONNECTION - Uses environment variables
# Set these environment variables for different environments:
#   POSTGRES_HOST     (default: localhost)
#   POSTGRES_PORT     (default: 5432)
#   POSTGRES_DB       (default: pulso_db)
#   POSTGRES_USER     (default: pulso_sa)
#   POSTGRES_PASSWORD (required)
#   POSTGRES_SSLMODE  (default: require for prod, disable for dev)
#
# Example for production:
#   export POSTGRES_HOST="prod-db.company.com"
#   export POSTGRES_PASSWORD="secure_password"
#   export POSTGRES_SSLMODE="require"
#
# Example for development:
#   export POSTGRES_PASSWORD="dev_password"
#   export POSTGRES_SSLMODE="disable"

database = postgresql://${POSTGRES_USER:pulso_sa}:${POSTGRES_PASSWORD}@${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DB:pulso_db}?sslmode=${POSTGRES_SSLMODE:require}

# Migration behavior
batch_mode = off
verbosity = 1

# üîß CONNECTION SETTINGS - Production optimized for TimescaleDB
post_connect_hooks = 
    SET statement_timeout = '30min';
    SET idle_in_transaction_session_timeout = '10min';
    SET lock_timeout = '2min';
    SET application_name = 'yoyo_migrations_pulso';
    CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;

# ========================================
# üöÄ PRODUCTION DEPLOYMENT GUIDE
# ========================================
#
# 1. Set environment variables:
#    export POSTGRES_HOST="your-prod-host"
#    export POSTGRES_USER="your-prod-user"  
#    export POSTGRES_PASSWORD="your-secure-password"
#    export POSTGRES_DB="pulso_db"
#    export POSTGRES_SSLMODE="require"
#
# 2. Verify connection:
#    yoyo list
#
# 3. Apply migrations:
#    yoyo apply
#
# 4. For Docker/Kubernetes:
#    docker run -e POSTGRES_PASSWORD=secret pulso-back yoyo apply
#
# ========================================

# ========================================
# üìä MIGRATION HISTORY - Simplified ETL Era
# ========================================
#
# CONVERTED TO SQL (June 29, 2025):
# - 010-create-raw-calendario-table.py    ‚Üí 011-create-raw-calendario-table.sql
# - 011-create-raw-asignaciones-table.py  ‚Üí 012-create-raw-asignaciones-table.sql  
# - 012-create-raw-trandeuda-table.py     ‚Üí 013-create-raw-trandeuda-table.sql
# - 013-create-raw-pagos-table.py         ‚Üí 014-create-raw-pagos-table.sql
# - 014-create-gestiones-unificadas-table.py ‚Üí 015-create-gestiones-unificadas-table.sql
#
# ADDED FOR SIMPLIFIED ETL (July 2025):
# - 016-create-simple-watermarks-table.sql ‚Üí etl_watermarks_simple table
#
# TIMESCALEDB OPTIMIZATIONS:
# ‚úÖ Hypertables for time-series data (asignaciones, trandeuda, gestiones)
# ‚úÖ Optimized indexes for temporal queries  
# ‚úÖ Chunk partitioning by month
# ‚úÖ Constraints for data quality
# ‚úÖ Comments for documentation
# ========================================

# ========================================
# üõ†Ô∏è COMMON COMMANDS
# ========================================
#
# üìã Status and Information:
#   yoyo list                              # Show migration status
#   yoyo info                              # Show database info
#
# üöÄ Apply Migrations:
#   yoyo apply                             # Apply all pending migrations
#   yoyo apply --one                       # Apply only next migration
#   yoyo apply --dry-run                   # Show what would be applied
#
# üîÑ Rollback:
#   yoyo rollback                          # Rollback last migration
#   yoyo rollback --one                    # Rollback one migration
#
# üÜï Create New Migration:
#   yoyo new "Add dashboard tables" --sql  # Create SQL migration
#   yoyo new "Add index" --python         # Create Python migration
#
# üîß Manual Operations:
#   yoyo mark                             # Mark migration as applied
#   yoyo unmark                           # Unmark migration
#
# ========================================
# üêò TIMESCALEDB MONITORING COMMANDS
# ========================================
#
# Connect to database and run:
#
# üìä Check hypertables:
#   SELECT schemaname, tablename, num_chunks, compression_enabled
#   FROM timescaledb_information.hypertables;
#
# üì¶ Check chunks:
#   SELECT chunk_schema, chunk_name, table_name, range_start, range_end
#   FROM timescaledb_information.chunks
#   ORDER BY range_start DESC LIMIT 10;
#
# üìà Check database size:
#   SELECT schemaname, tablename, 
#          pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
#   FROM timescaledb_information.hypertables;
#
# üîç Check recent activity:
#   SELECT schemaname, tablename, last_vacuum, last_analyze
#   FROM pg_stat_user_tables 
#   WHERE schemaname LIKE 'raw_%';
#
# ========================================
